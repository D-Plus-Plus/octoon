SET(LIB_NAME graphics)
SET(LIB_OUTNAME octoon-${LIB_NAME})

PROJECT(${LIB_OUTNAME})

SET(HEADER_PATH ${OCTOON_PATH_HEADER}/${LIB_NAME})
SET(SOURCE_PATH ${OCTOON_PATH_SOURCE}/${LIB_OUTNAME})

OPTION(OCTOON_FEATURE_GRAPHICS_USE_OPENGL "On for enable off for disable" ON)
OPTION(OCTOON_FEATURE_GRAPHICS_USE_OPENGL_ES "On for enable off for disable" ON)
OPTION(OCTOON_FEATURE_GRAPHICS_USE_HLSL "On for enable off for disable" OFF)

IF(OCTOON_FEATURE_GRAPHICS_USE_OPENGL)
	ADD_DEFINITIONS(-DGLEW_STATIC)
	ADD_DEFINITIONS(-DOCTOON_FEATURE_GRAPHICS_USE_OPENGL)
ENDIF()

IF(OCTOON_FEATURE_GRAPHICS_USE_OPENGL_ES)
	ADD_DEFINITIONS(-DOCTOON_FEATURE_GRAPHICS_USE_OPENGL_ES2)
ENDIF()

IF(OCTOON_FEATURE_GRAPHICS_USE_OPENGL_ES)
	ADD_DEFINITIONS(-DOCTOON_FEATURE_GRAPHICS_USE_OPENGL_ES3)
ENDIF()

IF(OCTOON_FEATURE_GRAPHICS_USE_HLSL)
	ADD_DEFINITIONS(-DOCTOON_FEATURE_GRAPHICS_USE_HLSL)
ENDIF()

INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/OpenGL")
INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/OpenGL Core")
IF(NOT OCTOON_TARGET_PLATFORM_EMSCRIPTEN)
    INCLUDE_DIRECTORIES("${OCTOON_PATH_DEPENDENCIES}/glew/include")
    INCLUDE_DIRECTORIES("${OCTOON_PATH_DEPENDENCIES}/gles/include")
ENDIF()
INCLUDE_DIRECTORIES("${OCTOON_PATH_DEPENDENCIES}/HLSLCrossCompiler/include")

SET(RENDERER_CORE
	${HEADER_PATH}/graphics.h
	${HEADER_PATH}/graphics_child.h
	${SOURCE_PATH}/graphics_child.cpp
	${HEADER_PATH}/graphics_context.h
	${SOURCE_PATH}/graphics_context.cpp
	${HEADER_PATH}/graphics_data.h
	${SOURCE_PATH}/graphics_data.cpp
	${HEADER_PATH}/graphics_debug.h
	${SOURCE_PATH}/graphics_debug.cpp
	${HEADER_PATH}/graphics_descriptor.h
	${SOURCE_PATH}/graphics_descriptor.cpp
	${HEADER_PATH}/graphics_device.h
	${SOURCE_PATH}/graphics_device.cpp
	${HEADER_PATH}/graphics_device_property.h
	${SOURCE_PATH}/graphics_device_property.cpp
	${HEADER_PATH}/graphics_input_layout.h
	${SOURCE_PATH}/graphics_input_layout.cpp
	${HEADER_PATH}/graphics_pipeline.h
	${SOURCE_PATH}/graphics_pipeline.cpp
	${HEADER_PATH}/graphics_resource.h
	${SOURCE_PATH}/graphics_resource.cpp
	${HEADER_PATH}/graphics_sampler.h
	${SOURCE_PATH}/graphics_sampler.cpp
	${HEADER_PATH}/graphics_semaphore.h
	${SOURCE_PATH}/graphics_semaphore.cpp
	${HEADER_PATH}/graphics_shader.h
	${SOURCE_PATH}/graphics_shader.cpp
	${HEADER_PATH}/graphics_state.h
	${SOURCE_PATH}/graphics_state.cpp
	${HEADER_PATH}/graphics_swapchain.h
	${SOURCE_PATH}/graphics_swapchain.cpp
	${HEADER_PATH}/graphics_system.h
	${SOURCE_PATH}/graphics_system.cpp
	${HEADER_PATH}/graphics_texture.h
	${SOURCE_PATH}/graphics_texture.cpp
	${HEADER_PATH}/graphics_types.h
	${HEADER_PATH}/graphics_framebuffer.h
	${SOURCE_PATH}/graphics_framebuffer.cpp
	${HEADER_PATH}/graphics_variant.h
	${SOURCE_PATH}/graphics_variant.cpp
)
SOURCE_GROUP("Common" FILES ${RENDERER_CORE})

SET(RENDERER_LIST ${RENDERER_CORE})

IF(OCTOON_FEATURE_GRAPHICS_USE_OPENGL)
	FILE(GLOB RENDERER_OGL_HEADER "OpenGL/*.h")
	FILE(GLOB RENDERER_OGL_SOURCE "OpenGL/*.cpp" "OpenGL/*.mm")
	FILE(GLOB RENDERER_OGL_CORE_HEADER "OpenGL Core/*.h")
	FILE(GLOB RENDERER_OGL_CORE_SOURCE "OpenGL Core/*.cpp")

	IF(NOT OCTOON_BUILD_PLATFORM_APPLE)
		LIST(REMOVE_ITEM RENDERER_OGL_HEADER "${SOURCE_PATH}/OpenGL/nsgl_swapchain.h")
		LIST(REMOVE_ITEM RENDERER_OGL_SOURCE "${SOURCE_PATH}/OpenGL/nsgl_swapchain.mm")
	ENDIF()

	IF(NOT OCTOON_BUILD_PLATFORM_LINUX)
		LIST(REMOVE_ITEM RENDERER_OGL_HEADER "${SOURCE_PATH}/OpenGL/x11_swapchain.h")
		LIST(REMOVE_ITEM RENDERER_OGL_SOURCE "${SOURCE_PATH}/OpenGL/x11_swapchain.cpp")
	ENDIF()

	IF(NOT OCTOON_BUILD_PLATFORM_WINDOWS)
		LIST(REMOVE_ITEM RENDERER_OGL_HEADER "${SOURCE_PATH}/OpenGL/wgl_swapchain.h")
		LIST(REMOVE_ITEM RENDERER_OGL_SOURCE "${SOURCE_PATH}/OpenGL/wgl_swapchain.cpp")
	ENDIF()

	SET(RENDERER_OGL ${RENDERER_OGL_HEADER} ${RENDERER_OGL_SOURCE})
	SET(RENDERER_OGL_CORE ${RENDERER_OGL_CORE_HEADER} ${RENDERER_OGL_CORE_SOURCE})

	SOURCE_GROUP("OpenGL" FILES ${RENDERER_OGL})
	SOURCE_GROUP("OpenGL Core" FILES ${RENDERER_OGL_CORE})

	LIST(APPEND RENDERER_LIST ${RENDERER_OGL})
	LIST(APPEND RENDERER_LIST ${RENDERER_OGL_CORE})	
ENDIF()

IF(OCTOON_FEATURE_GRAPHICS_USE_OPENGL_ES)
	FILE(GLOB RENDERER_EGL2_HEADER "OpenGL ES2/*.h")
	FILE(GLOB RENDERER_EGL2_SOURCE "OpenGL ES2/*.cpp")
	FILE(GLOB RENDERER_EGL3_HEADER "OpenGL ES3/*.h")
	FILE(GLOB RENDERER_EGL3_SOURCE "OpenGL ES3/*.cpp")

	SET(RENDERER_EGL2 ${RENDERER_EGL2_HEADER} ${RENDERER_EGL2_SOURCE})
	SET(RENDERER_EGL3 ${RENDERER_EGL3_HEADER} ${RENDERER_EGL3_SOURCE})

	SOURCE_GROUP("OpenGL ES2" FILES ${RENDERER_EGL2})
	SOURCE_GROUP("OpenGL ES3" FILES ${RENDERER_EGL3})

	LIST(APPEND RENDERER_LIST ${RENDERER_EGL2})
	LIST(APPEND RENDERER_LIST ${RENDERER_EGL3})
ENDIF()

IF(OCTOON_BUILD_PLATFORM_APPLE)
	SET_SOURCE_FILES_PROPERTIES(${RENDERER_LIST} PROPERTIES LANGUAGE CXX)
ENDIF()

IF(OCTOON_BUILD_SHARED_DLL)
	ADD_DEFINITIONS(-DOCTOON_BUILD_DLL_EXPORT)
	ADD_LIBRARY(${LIB_OUTNAME} SHARED ${RENDERER_LIST})
ELSE()
	ADD_DEFINITIONS(-DOCTOON_STATIC)
	ADD_LIBRARY(${LIB_OUTNAME} ${RENDERER_LIST})
ENDIF()

TARGET_LINK_LIBRARIES(${LIB_OUTNAME} PRIVATE octoon-runtime)

IF(OCTOON_TARGET_PLATFORM_EMSCRIPTEN)
    TARGET_LINK_LIBRARIES(${LIB_OUTNAME} PRIVATE X11)
    TARGET_LINK_LIBRARIES(${LIB_OUTNAME} PRIVATE GLESv2)
    TARGET_LINK_LIBRARIES(${LIB_OUTNAME} PRIVATE EGL)
ELSEIF(OCTOON_BUILD_PLATFORM_APPLE)
	FIND_LIBRARY(COCOA_FRAMEWORK Cocoa)
	FIND_LIBRARY(OPENGL_FRAMEWORK OpenGL)
	TARGET_LINK_LIBRARIES(${LIB_OUTNAME} PRIVATE ${COCOA_FRAMEWORK})
	TARGET_LINK_LIBRARIES(${LIB_OUTNAME} PRIVATE ${OPENGL_FRAMEWORK})
ELSEIF(OCTOON_BUILD_PLATFORM_LINUX)
	FIND_PACKAGE(OpenGL REQUIRED)
	TARGET_LINK_LIBRARIES(${LIB_OUTNAME} PRIVATE X11)
	TARGET_LINK_LIBRARIES(${LIB_OUTNAME} PRIVATE ${OPENGL_LIBRARIES})
ENDIF()

IF(OCTOON_FEATURE_GRAPHICS_USE_OPENGL)
	TARGET_LINK_LIBRARIES(${LIB_OUTNAME} PRIVATE glew)
ENDIF()

IF(OCTOON_FEATURE_GRAPHICS_USE_OPENGL_ES)
    IF(OCTOON_TARGET_PLATFORM_EMSCRIPTEN)
        TARGET_LINK_LIBRARIES(${LIB_OUTNAME} PRIVATE EGL)
        TARGET_LINK_LIBRARIES(${LIB_OUTNAME} PRIVATE GLESv2)
        set_target_properties(${LIB_OUTNAME} PROPERTIES LINK_FLAGS "-s FULL_ES2=1 -s FULL_ES3=1")
    ELSE()
        TARGET_LINK_LIBRARIES(${LIB_OUTNAME} PRIVATE libEGL)
        TARGET_LINK_LIBRARIES(${LIB_OUTNAME} PRIVATE libGLESv2)
    ENDIF()
ENDIF()

IF(OCTOON_FEATURE_GRAPHICS_USE_HLSL)
	TARGET_LINK_LIBRARIES(${LIB_OUTNAME} PRIVATE d3dcompiler)
	TARGET_LINK_LIBRARIES(${LIB_OUTNAME} PRIVATE libHLSLcc)
ENDIF()

SET_TARGET_ATTRIBUTE(${LIB_OUTNAME} "core")