SET(LIB_NAME script)
SET(LIB_OUTNAME octoon-${LIB_NAME})

INCLUDE_DIRECTORIES(${OCTOON_PATH_DEPENDENCIES}/lua)

SET(HEADER_PATH ${OCTOON_PATH_HEADER}/${LIB_NAME})
SET(SOURCE_PATH ${OCTOON_PATH_SOURCE}/${LIB_OUTNAME})

SET(SCRIPT_LIST
    ${HEADER_PATH}/script_binder.h
    ${SOURCE_PATH}/script_binder.cpp
    ${SOURCE_PATH}/script_binder_base.h
    ${SOURCE_PATH}/script_binder_base.cpp
    ${SOURCE_PATH}/script_binder_console.h
    ${SOURCE_PATH}/script_binder_console.cpp
    ${HEADER_PATH}/script_env.h
    ${SOURCE_PATH}/script_env.cpp
    ${HEADER_PATH}/script_context.h
    ${SOURCE_PATH}/script_context.cpp
)
SOURCE_GROUP(${LIB_NAME} FILES ${SCRIPT_LIST})

IF(OCTOON_BUILD_SHARED_DLL)
	ADD_DEFINITIONS(-DOCTOON_BUILD_DLL_EXPORT)
	ADD_LIBRARY(${LIB_OUTNAME} SHARED ${SCRIPT_LIST})
ELSE()
	ADD_DEFINITIONS(-DOCTOON_STATIC)
	ADD_LIBRARY(${LIB_OUTNAME} ${SCRIPT_LIST})
ENDIF()

TARGET_LINK_LIBRARIES(${LIB_OUTNAME} PRIVATE lua)
TARGET_LINK_LIBRARIES(${LIB_OUTNAME} PRIVATE octoon-runtime)

SET_TARGET_ATTRIBUTE(${LIB_OUTNAME} "core")