ADD_DEFINITIONS(-DPX_PHYSX_CORE_EXPORTS)

FILE(GLOB_RECURSE PHYSX_HEADERS ${PHYSX_PATH_SOURCE}/PhysX/src/*.h)
FILE(GLOB_RECURSE PHYSX_SOURCES ${PHYSX_PATH_SOURCE}/PhysX/src/*.cpp)

LIST(APPEND PHYSX_SOURCES ${PHYSX_PATH_SOURCE}/ImmediateMode/src/NpImmediateMode.cpp)
LIST(APPEND PHYSX_SOURCES ${PHYSX_PATH_SOURCE}/PhysXMetaData/core/src/PxAutoGeneratedMetaDataObjects.cpp)
LIST(APPEND PHYSX_SOURCES ${PHYSX_PATH_SOURCE}/PhysXMetaData/core/src/PxMetaDataObjects.cpp)

if(UNIX OR APPLE OR EMSCRIPTEN)
    LIST(REMOVE_ITEM PHYSX_HEADERS "${PHYSX_PATH_SOURCE}/PhysX/src/gpu/NpPhysicsGpu.h")
    LIST(REMOVE_ITEM PHYSX_SOURCES "${PHYSX_PATH_SOURCE}/PhysX/src/gpu/NpPhysicsGpu.cpp")
    LIST(REMOVE_ITEM PHYSX_SOURCES "${PHYSX_PATH_SOURCE}/PhysX/src/gpu/PxGpu.cpp")
    LIST(REMOVE_ITEM PHYSX_SOURCES "${PHYSX_PATH_SOURCE}/PhysX/src/gpu/PxParticleDeviceExclusive.cpp")
    LIST(REMOVE_ITEM PHYSX_SOURCES "${PHYSX_PATH_SOURCE}/PhysX/src/gpu/PxParticleGpu.cpp")
    LIST(REMOVE_ITEM PHYSX_SOURCES "${PHYSX_PATH_SOURCE}/PhysX/src/gpu/PxPhysXGpuModuleLoader.cpp")
    LIST(REMOVE_ITEM PHYSX_SOURCES "${PHYSX_PATH_SOURCE}/PhysX/src/gpu/PxPhysXIndicatorDeviceExclusive.cpp")
    LIST(REMOVE_ITEM PHYSX_SOURCES "${PHYSX_PATH_SOURCE}/PhysX/src/windows/NpWindowsDelayLoadHook.cpp")
    LIST(REMOVE_ITEM PHYSX_SOURCES "${PHYSX_PATH_SOURCE}/PhysX/src/device/windows/PhysXIndicatorWindows.cpp")
    LIST(REMOVE_ITEM PHYSX_SOURCES "${PHYSX_PATH_SOURCE}/PhysX/src/device/windows/PhysXIndicatorWindows.cpp")
endif()

if(WIN32 OR APPLE)
    LIST(REMOVE_ITEM PHYSX_SOURCES "${PHYSX_PATH_SOURCE}/PhysX/src/device/linux/PhysXIndicatorLinux.cpp")
endif()

SOURCE_GROUP("Headers" FILES ${PHYSX_HEADERS})
SOURCE_GROUP("Sources" FILES ${PHYSX_SOURCES})

IF(NOT WIN32)
    ADD_DEFINITIONS(-DPX_PHYSX_STATIC_LIB)
ENDIF()

IF(WIN32)
    ADD_LIBRARY(PhysX3 SHARED ${PHYSX_HEADERS} ${PHYSX_SOURCES})
ELSE()
    ADD_LIBRARY(PhysX3 ${PHYSX_HEADERS} ${PHYSX_SOURCES})
ENDIF()

IF(WIN32)
    TARGET_LINK_LIBRARIES(PhysX3 PRIVATE LowLevel)
    TARGET_LINK_LIBRARIES(PhysX3 PRIVATE LowLevelCloth)
    TARGET_LINK_LIBRARIES(PhysX3 PRIVATE LowLevelAABB)
    TARGET_LINK_LIBRARIES(PhysX3 PRIVATE LowLevelDynamics)
    TARGET_LINK_LIBRARIES(PhysX3 PRIVATE LowLevelParticles)
    TARGET_LINK_LIBRARIES(PhysX3 PRIVATE PhysX3Common)
    TARGET_LINK_LIBRARIES(PhysX3 PRIVATE PxTask)
    TARGET_LINK_LIBRARIES(PhysX3 PRIVATE PxPvdSDK)
    TARGET_LINK_LIBRARIES(PhysX3 PRIVATE PxFoundation)
    TARGET_LINK_LIBRARIES(PhysX3 PRIVATE SceneQuery)
    TARGET_LINK_LIBRARIES(PhysX3 PRIVATE SimulationController)
    TARGET_LINK_LIBRARIES(PhysX3 PRIVATE "${PHYSX_PATH_EXTERNALS}/nvToolsExt/1/lib/x64/nvToolsExt64_1.lib")
ELSE()
    TARGET_LINK_LIBRARIES(PhysX3 PUBLIC LowLevel)
    TARGET_LINK_LIBRARIES(PhysX3 PUBLIC LowLevelCloth)
    TARGET_LINK_LIBRARIES(PhysX3 PUBLIC LowLevelAABB)
    TARGET_LINK_LIBRARIES(PhysX3 PUBLIC LowLevelDynamics)
    TARGET_LINK_LIBRARIES(PhysX3 PUBLIC LowLevelParticles)
    TARGET_LINK_LIBRARIES(PhysX3 PUBLIC PhysX3Common)
    TARGET_LINK_LIBRARIES(PhysX3 PUBLIC PxTask)
    TARGET_LINK_LIBRARIES(PhysX3 PUBLIC PxPvdSDK)
    TARGET_LINK_LIBRARIES(PhysX3 PUBLIC PxFoundation)
    TARGET_LINK_LIBRARIES(PhysX3 PUBLIC SceneQuery)
    TARGET_LINK_LIBRARIES(PhysX3 PUBLIC SimulationController)
    TARGET_LINK_LIBRARIES(PhysX3 PUBLIC "${PHYSX_PATH_EXTERNALS}/nvToolsExt/1/lib/x64/nvToolsExt64_1.lib")
ENDIF()